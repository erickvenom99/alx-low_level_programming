#include "main.h"
/**
 *is_prime_asst - Check if number is prime
 *@n: the number to be checked
 *@divisor: the divisor
 *
 *Return: 1 for prime or 0 composite
 */
int is_prime_asst(int n, int divisor)
{
	if (n <= 1)
	{
		return (0);
	}
	if (divisor * divisor > n)
	{
		return (1);
	}
	if ( n % divisor == 0)
	{
		return (0);
	}
	return is_prime_asst(n, divisor + 1);
}

/**
 *is_prime_number- Returns if number is prime
 *@n: the number to be checked
 *@divisor: the divisor
 *
 *Return: integer Value
 */

int is_prime_number(int n)
{
	int is_prime_asst(int n, 2);
}

===============================================================================

	int is_prime_number(int n)
{
	if (n <= 1)
		return (0);
	return (actual_prime(n, n - 1));
}

/**
 * actual_prime - calculates if a number is prime recursively
 * @n: number to evaluate
 * @i: iterator
 *
 * Return: 1 if n is prime, 0 if not
 */
int actual_prime(int n, int i)
{
	if (i == 1)
		return (1);
	if (n % i == 0 && i > 0)
		return (0);
	return (actual_prime(n, i - 1));
}
=======================================================================
	#include "main.h"
	/**
	 *is_prime_number- Returns if number is prime
	 *@n: the number to be checker
	 *
	 *Return: integer Value
	 */

	int is_prime_number(int n)
{
	return (is_prime_asst(n, 2));
}

/**
 *is_prime_asst - Check if number is prime
 *@n: the number to be checked
 *@divisor: the divisor
 *
 *Return: 1 for prime or 0 composite
 */
int is_prime_asst(int n, int divisor)
{
	if (n <= 1)
	{
		return (0);
	}
	if (divisor * divisor > n)
	{
		return (1);
	}
	if (n % divisor == 0)
	{
		return (0);
	}
	return (is_prime_asst(n, divisor + 1));
}
